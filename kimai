#!/usr/bin/env bash

set -euo pipefail
shopt -s inherit_errexit

# shellcheck source=/home/janne/.config/kimai
. ~/.config/kimai
# kimaiURL=
# user=
# token=
# projectID=
# activityID=

# sickDays=
# hoursPerDay=
# holidayActivity=

# Run an authenticated curl
_curl() {
	curl -sfH 'Content-Type: application/json' -H "X-AUTH-USER: ${user}" -H "X-AUTH-TOKEN: ${token}" "${@}"
}

# Return the ID of the currently active timesheet or "" if
# there is none
getActiveID() {
	local json
	json="$(_curl -X GET "${kimaiURL}/api/timesheets/active")"
	[[ "$(jq length <<< "${json}")" = 0 ]] && return # No active timesheet
	jq '.[].id' <<< "${json}"
}

# Return the edit URL of a timesheet by ID
editURL() {
	local id="${1}"
	echo "${kimaiURL}/en/timesheet/${id}/edit"
}

# Opens $EDITOR with the current description
editDescription() {
	local id="${1}"
	local desc newJSON
	tmpfile="$(mktemp)"
	trap 'rm "${tmpfile}"' INT TERM EXIT

	# Get the current description
	desc="$(_curl -X GET "${kimaiURL}/api/timesheets/${id}" | jq -r .description)"
	if [[ "${desc}" == null ]]; then
		desc=
	fi
	# Edit the description
	echo "${desc}" > "${tmpfile}"
	"${EDITOR:-vim}" "${tmpfile}"
	# Write it back to Kimai
	desc="$(< "${tmpfile}")"
	newJSON="{ \"description\": \"${desc//\"/\\\"}\" }"
	_curl -X PATCH -d "${newJSON}" "${kimaiURL}/api/timesheets/${id}" >/dev/null
}

# Start a new timesheet and return its ID
newTimesheet() {
	local json
	json="$(cat <<-EOF
		{
			"project": ${projectID},
			"activity": ${activityID},
			"description": "",
			"exported": false,
			"billable": true,
			"tags": ""
		}
	EOF
	)"
	_curl -X POST -d "${json}" "${kimaiURL}/api/timesheets" | jq .id
}

# Stop the timesheet given by ID
stopTimesheet() {
	local id="${1}"
	local json description newDescription newJSON
	json="$(_curl -X GET "${kimaiURL}/api/timesheets/${id}")"

	# Ensure a description
	description="$(jq -r .description <<< "${json}")"
	if [[ "${description}" = null ]]; then
		echo "Please add a description for the timesheet you did."
		echo "It started at $(jq -r .begin <<< "${json}")"
		newDescription=
		while [[ -z "${newDescription:-}" ]]; do
			read -r -p "Description: " newDescription
		done
		newJSON="{ \"description\": \"${newDescription//\"/\\\"}\" }"
		_curl -X PATCH -d "${newJSON}" "${kimaiURL}/api/timesheets/${id}" >/dev/null
	fi

	# Stop the timesheet
	_curl -X PATCH "${kimaiURL}/api/timesheets/${id}/stop" >/dev/null
	echo "Stopped $(editURL "${id}")"
}

secondsToHuman() {
	raw="${1}"

	seconds="$(bc <<< "${raw} % 60")"
	minutes="$(bc <<< "${raw} / 60 % 60")"
	hours="$(bc <<< "${raw} / 60 / 60")"
	if [[ "${seconds}" -lt 0 ]]; then
		seconds="$((seconds * -1))"
	fi
	if [[ "${minutes}" -lt 0 ]]; then
		minutes="$((minutes * -1))"
	fi
	if [[ "${hours}" -lt 0 ]]; then
		hours="$((hours * -1))"
		sign=-
	else
		sign=+
	fi

	printf "%s%02d:%02d:%02d\n" "${sign}" "${hours}" "${minutes}" "${seconds}"
}

renderDaily() {
	hoursPerDay="${hoursPerDay:-8}"
	pagesize=100
	start="$(date +%Y-%m-%dT00:00:00)"
	end="$(date +%Y-%m-%dT%H:%M:%S)"
	i=1
	sum=0
	while :; do
		out="$(_curl --no-fail -i "${kimaiURL}/api/timesheets?begin=${start}&end=${end}&size=${pagesize}&page=${i}")"
		code="$(grep ^HTTP/ <<< "${out}" | cut -d' ' -f2)"
		if [[ "${code}" == 404 ]]; then
			break
		fi
		if [[ "${code}" != 200 ]]; then
			echo "Unexpected HTTP response: ${code}"
			echo "${out}"
		fi

		durationSum="$(grep '^\[' <<< "${out}" | jq "[.[] | .duration] | add")"
		((sum += durationSum))
		i="$((i + 1))"
	done

	daySeconds="$((hoursPerDay * 60 * 60))"

	echo "Only stopped timesheets are counted!"
	echo "You should have worked $(secondsToHuman "${daySeconds}") by the end of this day"
	echo "You have actually worked $(secondsToHuman "${sum}")"
	echo "Diff in worktime right now: $(secondsToHuman "$((sum - daySeconds))")"
}

renderYearly() {
	# Sum up duration
	begin="$(date +%y)-01-01T00:00:00"
	end="$(date +%Y-%m-%dT%H:%M:%S)"
	pagesize=100
	i=1
	sum=0
	holidaySum=0
	while :; do
		out="$(_curl --no-fail -i "${kimaiURL}/api/timesheets?begin=${begin}&end=${end}&size=${pagesize}&page=${i}")"
		code="$(grep ^HTTP/ <<< "${out}" | cut -d' ' -f2)"
		if [[ "${code}" == 404 ]]; then
			break
		fi
		if [[ "${code}" != 200 ]]; then
			echo "Unexpected HTTP response: ${code}"
			echo "${out}"
		fi

		durationSum="$(grep '^\[' <<< "${out}" | jq "[.[] | select(.activity != ${holidayActivity}) | .duration] | add")"
		((sum += durationSum))
		# Count holiday days
		out="$(_curl --no-fail -i "${kimaiURL}/api/timesheets?begin=${begin}&end=${end}&size=${pagesize}&page=${i}")"
		code="$(grep ^HTTP/ <<< "${out}" | cut -d' ' -f2)"
		if [[ "${code}" != 200 ]]; then
			echo "Unexpected HTTP response: ${code}"
			echo "${out}"
			exit 1
		fi

		holidays="$(grep '^\[' <<< "${out}" | jq "[.[] | select(.activity == ${holidayActivity})] | length")"
		holidaySum="$((holidaySum + holidays))"

		i="$((i + 1))"
	done
	# Calculate seconds we should have spent working
	daysSoFar=0
	d="$(date +%Y)-01-01"
	tomorrow="$(date -d 'today + 1 day' +%Y-%m-%d)"
	while :; do
		weekday="$(date -d "${d}" +%w)"
		if [[ "${weekday}" != 0 && "${weekday}" != 6 ]]; then
			daysSoFar="$((daysSoFar + 1))"
		fi
		d="$(date -d "${d} + 1 day" +%Y-%m-%d)"
		if [[ "${d}" == "${tomorrow}" ]]; then
			break
		fi
	done
	sickDays="${sickDays:-0}"
	hoursPerDay="${hoursPerDay:-8}"
	daysSoFar="$((daysSoFar - sickDays - holidaySum))"
	hoursSoFar="$((daysSoFar * hoursPerDay))"
	secondsSoFar="$((hoursSoFar * 60 * 60))"
	echo "Only stopped timesheets are counted!"
	echo "You should have worked ${daysSoFar}d by the end of this day, this is $(secondsToHuman "${secondsSoFar}")"
	echo "You have actually worked $(secondsToHuman "${sum}")"
	echo "Diff in worktime right now: $(secondsToHuman "$((sum - secondsSoFar))")"
}

action="${1:-}"
currentID="$(getActiveID)"
case "${action}" in
	start)
		if [[ -n "${currentID}" ]]; then
			echo "You are already doing something: $(editURL "${currentID}")"
			exit 1
		fi
		editURL "$(newTimesheet)"
		;;
	stop)
		if [[ -z "${currentID}" ]]; then
			echo "You are not doing anything"
			exit 1
		fi
		stopTimesheet "${currentID}"
		;;
	switch)
		if [[ -z "${currentID}" ]]; then
			echo "You are not doing anything"
			exit 1
		fi
		stopTimesheet "${currentID}"
		editURL "$(newTimesheet)"
		;;
	desc)
		if [[ -z "${currentID}" ]]; then
			echo "You are not doing anything"
			exit 1
		fi
		editDescription "${currentID}"
		;;
	yearly)
		renderYearly
		;;
	daily)
		renderDaily
		;;
	*)
		echo "Usage: ${0} [start|stop|switch|desc|yearly|daily]" >&2
		exit 1
esac
