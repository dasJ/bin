#!/usr/bin/env bash

set -euo pipefail

if ! apiurl="$(git config --get gitlab.url)/api/v4"; then
	echo "You forgot to set gitlab.url" >&2
	exit 1
fi
if ! slug="$(git config --get gitlab.slug)"; then
	echo "You forgot to set gitlab.slug" >&2
	exit 1
fi
if ! token="$(git config --get gitlab.token)"; then
	echo "You forgot to set gitlab.token" >&2
	exit 1
fi

branch="$(git rev-parse --abbrev-ref HEAD 2>/dev/null)"
declare -A uidCache

# Urlencode a string
urlencode() {
	# https://stackoverflow.com/a/7506695
	echo -ne "${1}" | xxd -plain | tr -d '\n' | sed 's/\(..\)/%\1/g'
}

# Run curl with auth
curl() {
	command curl -s -H "Authorization: Bearer ${token}" "${@}"
}

# Fetch the UID of a user by name
fetchUid() {
	# Fetch from the cache if cached
	if [[ -v uidCache["$1"] ]]; then
		echo "${uidCache[\"$1\"]}"
		return
	fi
	uid="$(curl "${apiurl}/users/?username=$(urlencode "${1}")" | jq '.[].id')"
	if [ -z "${uid}" ]; then
		echo "User ${1} does not exist" >&2
		exit 1
	fi
	uidCache["${1}"]="${uid}"
	echo "${uid}"
}

# Show details if desired
paddedTitle() {
	tput bold
	printf %-13s "${1}: "
	tput sgr0
}
show() {
	json="${1}"
	{
		paddedTitle ID
		wip="$(jq '.[].work_in_progress' <<< "${json}")"
		if [ "${wip}" = true ]; then
			wip=" $(tput setaf 3)(WIP)$(tput sgr0)"
		else
			wip=
		fi
		echo "!$(jq '.[].iid' <<< "${json}")${wip} - $(jq -r '.[].web_url' <<< "${json}")"
	}
	{
		paddedTitle Branch
		jq -r '.[].source_branch' <<< "${json}"
	}
	{
		paddedTitle Automerge
		automerge="$(jq '.[].merge_when_pipeline_succeeds' <<< "${json}")"
		if [ "${automerge}" = true ]; then
			echo "$(tput setaf 2)yes$(tput sgr0)"
		else
			echo "$(tput setaf 1)no$(tput sgr0)"
		fi
	}
	{
		paddedTitle "Last update"
		jq -r '.[].updated_at' <<< "${json}"
	}
	{
		paddedTitle "Assignees"
		jq -r '[.[].assignees | .[] | .username] | join(", ")' <<< "${json}"
	}
	{
		paddedTitle "Reviewers"
		jq -r '[.[].reviewers | .[] | .username] | join(", ")' <<< "${json}"
	}
	{
		paddedTitle Title
		jq -r '.[].title' <<< "${json}"
	}
	{
		paddedTitle Description
		echo
		jq -r '.[].description' <<< "${json}"
	}
}

# Parse arguments
labels=()
assignees=()
reviewers=()
ready=0
draft=0
needsUpdate=0
show=0
usage() {
	echo "Usage: git mr [-h] [-d/-R] [-s] [-t title] [-b body] [-l label].. [-a assignee].. [-r reviewer].."
	exit "${1}"
}
while getopts "hdRst:b:l:a:r:" o; do
	case "${o}" in
		t)
			title="${OPTARG}"
			needsUpdate=1
			;;
		b)
			body="${OPTARG}"
			needsUpdate=1
			;;
		l)
			labels+=("${OPTARG}")
			needsUpdate=1
			;;
		a)
			assignees+=("${OPTARG}")
			needsUpdate=1
			;;
		r)
			reviewers+=("${OPTARG}")
			needsUpdate=1
			;;
		d)
			draft=1
			needsUpdate=1
			;;
		R)
			ready=1
			needsUpdate=1
			;;
		s)
			show=1
			;;
		h)
			usage 0
			;;
		*)
			usage 1
			;;
	esac
done

if [ "${draft}" = 1 ] && [ "${ready}" = 1 ]; then
	echo "A MR cannot be both a draft and ready" >&2
	exit 1
fi

# Format params
if [ "${#labels[@]}" != 0 ]; then
	labelsParam='&labels='
	first=1
	for label in "${labels[@]}"; do
		if [ "${first}" = 1 ]; then
			first=0
		else
			labelsParam="${labelsParam},"
		fi
		labelsParam="${labelsParam}$(urlencode "${label}")"
	done
else
	labelsParam=
fi
if [ "${#assignees[@]}" != 0 ]; then
	assigneesParam='&assignee_ids='
	first=1
	for username in "${assignees[@]}"; do
		if [ "${first}" = 1 ]; then
			first=0
		else
			assigneesParam="${assigneesParam},"
		fi
		uid="$(fetchUid "${username}")"
		assigneesParam="${assigneesParam}${uid}"
	done
	
else
	assigneesParam=
fi
if [ "${#reviewers[@]}" != 0 ]; then
	reviewersParam='&reviewer_ids='
	first=1
	for username in "${reviewers[@]}"; do
		if [ "${first}" = 1 ]; then
			first=0
		else
			reviewersParam="${reviewersParam},"
		fi
		uid="$(fetchUid "${username}")"
		reviewersParam="${reviewersParam}${uid}"
	done
	
else
	reviewersParam=
fi

# Find existing MR
json="$(curl "${apiurl}/projects/$(urlencode "${slug}")/merge_requests?state=opened&source_branch=$(urlencode "${branch}")&target_branch=master")"
webUrl="$(jq -r '.[].web_url' <<< "${json}")"
if [ -n "${webUrl}" ]; then
	# Maybe update the MR
	if [ "${needsUpdate}" = 1 ]; then
		id="$(jq -r '.[].iid' <<< "${json}")"
		oldTitle="$(jq -r '.[].title' <<< "${json}")"
		echo "Updating !${id}" >&2
		if [ -n "${title:-}" ]; then
			if [ "${draft}" = 1 ]; then
				title="Draft: ${title}"
			fi
			titleParam="&title=$(urlencode "${title}")"
		else
			if [ "${draft}" = 1 ]; then
				titleParam="&title=$(urlencode "Draft: ${oldTitle}")"
			elif [ "${ready}" = 1 ]; then
				titleParam="&title=$(urlencode "${oldTitle#"Draft: "}")"
			else
				titleParam=
			fi
		fi
		if [ -n "${body:-}" ]; then
			bodyParam="&description=$(urlencode "${body}")"
		else
			bodyParam=
		fi
		curl -XPUT "$(sed 's/&/?/' <<< "${apiurl}/projects/$(urlencode "${slug}")/merge_requests/${id}${titleParam}${bodyParam}${labelsParam}${assigneesParam}${reviewersParam}")" >/dev/null
	fi
	show "$(curl "${apiurl}/projects/$(urlencode "${slug}")/merge_requests?state=opened&source_branch=$(urlencode "${branch}")&target_branch=master")"
	exit 0
fi

# Create new MR
[ -z "${title:-}" ] && title="$(git log -1 --pretty=%s)"
[ -z "${body:-}" ] && body="$(git log -1 --pretty=%b)"
if [ "${draft}" = 1 ]; then
	title="Draft: ${title}"
fi
json="$(curl -XPOST "${apiurl}/projects/$(urlencode "${slug}")/merge_requests?source_branch=$(urlencode "${branch}")&target_branch=master&remove_source_branch=true&title=$(urlencode "${title}")&description=$(urlencode "${body}")${labelsParam}${assigneesParam}${reviewersParam}")"
show "[${json}]"
